ggplot(aes(x = genre_count, y = fct_reorder(genre_name, genre_count))) +
geom_col()
genre_df %>%
ggplot(aes(x = genre_count, y = fct_reorder(genre_name, genre_count))) +
geom_col()
library(tidyverse)
library(ggplot2)
movies <- read_csv("mymoviedb.csv") #replace with file name
movies_by_genre <- movies %>%
separate(Genre, into = c("Genre1", "Genre2", "Genre3",
"Genre4", "Genre5", "Genre6",
"Genre7"),
sep = ",")
genre_list <- movies_by_genre$Genre1 %>%
unique()
genre_df <- data.frame(genre_name = genre_list)
genre_df$genre_count <- replicate(nrow(genre_df), 0)
movies_language <- movies %>%
filter(Original_Language == "en") #replace with shiny app selector
for(x in movies_language$Genre) {
#can replace movies_language with movies for full count
for(gen in 1:nrow(genre_df)) {
row <- genre_df[gen,]
ifelse(str_detect(x, row$genre_name),
row$genre_count <- row$genre_count + 1,
row$genre_count <- row$genre_count + 0)
genre_df[gen, ] <- row
}
}
genre_df
genre_df %>%
ggplot(aes(x = genre_count, y = fct_reorder(genre_name, genre_count))) +
geom_col() +
labs(x = "Total Number of Movies", y = "",
title = "Number of Movies in Each Genre for Given Language")
theme_minimal()
genre_df %>%
ggplot(aes(x = genre_count, y = fct_reorder(genre_name, genre_count))) +
geom_col() +
labs(x = "Total Number of Movies", y = "",
title = "Number of Movies in Each Genre for Given Language") +
theme_minimal()
genre_df %>%
ggplot(aes(x = genre_count, y = fct_reorder(genre_name, genre_count))) +
geom_col() +
labs(x = "Total Number of Movies", y = "",
title = "Number of Movies in Each Genre for x Language") +
theme_minimal()
genre_df %>%
ggplot(aes(x = genre_count, y = fct_reorder(genre_name, genre_count))) +
geom_col() +
labs(x = "Total Number of Movies", y = "",
title = "Number of Movies in Each Genre for xxxx Language") +
theme_minimal()
movies %>%
arrange(desc(Popularity)) %>%
select(Title, Popularity) %>%
top_n(20) %>%
ggplot(aes(x = Popularity, y = fct_reorder(Title,Popularity))) +
geom_col()  +
ggtitle("Top 20 Movies by Popularity") +
ylab("")
movies %>%
arrange(desc(Popularity)) %>%
select(Title, Popularity) %>%
top_n(20) %>%
ggplot(aes(x = Popularity, y = fct_reorder(Title,Popularity))) +
geom_col()  +
ggtitle("Top 20 Movies by Popularity") +
ylab("") +
theme_minimal()
View(movies)
movies %>%
mutate(year = lubridate::year(Release_Date))
movies %>%
mutate(year = lubridate::year(Release_Date)) %>%
group_by(year) %>%
ggplot(aes(x = date, y = n())) +
geom_density()
movies %>%
mutate(year = lubridate::year(Release_Date)) %>%
group_by(year) %>%
mutate(count = n()) %>%
ungroup() %>%
ggplot(aes(x = date, y = count)) +
geom_density()
movies %>%
mutate(year = lubridate::year(Release_Date)) %>%
group_by(year) %>%
mutate(count = n()) %>%
ungroup() %>%
ggplot(aes(x = date, y = count)) +
geom_density()
movies %>%
mutate(year = lubridate::year(Release_Date)) %>%
group_by(year) %>%
mutate(count = n()) %>%
ggplot(aes(x = date, y = count)) +
geom_density()
movies %>%
mutate(year = lubridate::year(Release_Date)) %>%
group_by(year) %>%
mutate(count = n()) %>%
ungroup() %>%
ggplot(aes(x = Release_Date, y = count)) +
geom_density()
movies %>%
mutate(year = lubridate::year(Release_Date)) %>%
group_by(year) %>%
mutate(count = n()) %>%
ungroup() %>%
ggplot() +
geom_density(aes(x = Release_Date, y = count))
movies %>%
mutate(year = lubridate::year(Release_Date)) %>%
group_by(year) %>%
mutate(count = n()) %>%
ungroup() %>%
ggplot(aes(y = Release_Date)) +
geom_density()
movies %>%
mutate(year = lubridate::year(Release_Date)) %>%
group_by(year) %>%
mutate(count = n()) %>%
ungroup() %>%
ggplot(aes(y = Release_Date)) +
geom_density() +
coord_flip()
movies %>%
mutate(year = lubridate::year(Release_Date)) %>%
group_by(year) %>%
mutate(count = n()) %>%
ungroup() %>%
ggplot(aes(y = Release_Date)) +
geom_density() +
coord_flip() +
theme_minimal()
movies %>%
arrange(desc(Vote_Average)) %>%
select(Title, Vote_Average) %>%
top_n(20) %>%
ggplot(aes(x = Vote_Average, y = fct_reorder(Title,Vote_Average))) +
geom_col()  +
labs(x = "", y = "Average Rating",
title = "Top 20 Average Movie Ratings",
caption = "Ratings on a scale of 0-10, with higher values indicating better scores. Data based on consumer ratings from TMDB.") +
theme_minimal()
movies %>%
filter(Original_Language == "en") %>%
arrange(desc(Vote_Average)) %>%
select(Title, Vote_Average) %>%
top_n(20) %>%
ggplot(aes(x = Vote_Average, y = fct_reorder(Title,Vote_Average))) +
geom_col()  +
labs(x = "", y = "Average Rating",
title = "Top 20 Average Movie Ratings",
caption = "Ratings on a scale of 0-10, with higher values indicating better scores. Data based on consumer ratings from TMDB.") +
theme_minimal()
movies %>%
filter(Original_Language == "en") %>%
arrange(desc(Vote_Average)) %>%
select(Title, Vote_Average) %>%
top_n(20) %>%
ggplot(aes(x = Vote_Average, y = fct_reorder(Title,Vote_Average))) +
geom_col()  +
labs(x = "", y = "Average Rating",
title = "Top 20 Average Movie Ratings",
caption = "Ratings on a scale of 0-10, with higher values indicating better scores.\nData based on consumer ratings from TMDB.") +
theme_minimal()
movies %>%
filter(Original_Language == "en") %>%
arrange(desc(Vote_Average)) %>%
select(Title, Vote_Average) %>%
top_n(20) %>%
ggplot(aes(x = Vote_Average, y = fct_reorder(Title,Vote_Average))) +
geom_col()  +
labs(x = "Average Rating", y = ""
title = "Top 20 Average Movie Ratings",
movies %>%
filter(Original_Language == "en") %>%
arrange(desc(Vote_Average)) %>%
select(Title, Vote_Average) %>%
top_n(20) %>%
ggplot(aes(x = Vote_Average, y = fct_reorder(Title,Vote_Average))) +
geom_col()  +
labs(x = "Average Rating", y = "",
title = "Top 20 Average Movie Ratings",
caption = "Ratings on a scale of 0-10, with higher values indicating better scores.\nData based on consumer ratings from TMDB.") +
theme_minimal()
library(tidyverse)
library(ggplot2)
movies <- read_csv("mymoviedb.csv") #replace with file name
movies_by_genre <- movies %>%
separate(Genre, into = c("Genre1", "Genre2", "Genre3",
"Genre4", "Genre5", "Genre6",
"Genre7"),
sep = ",")
genre_list <- movies_by_genre$Genre1 %>%
unique()
genre_df <- data.frame(genre_name = genre_list)
genre_df$genre_count <- replicate(nrow(genre_df), 0)
movies_language <- movies %>%
filter(Original_Language == "en") #replace with shiny app selector
for(x in movies_language$Genre) {
#can replace movies_language with movies for full count
for(gen in 1:nrow(genre_df)) {
row <- genre_df[gen,]
ifelse(str_detect(x, row$genre_name),
row$genre_count <- row$genre_count + 1,
row$genre_count <- row$genre_count + 0)
genre_df[gen, ] <- row
}
}
View(movies)
genre_df
genre_df %>%
ggplot(aes(x = genre_count, y = fct_reorder(genre_name, genre_count))) +
geom_col() +
labs(x = "Total Number of Movies", y = "",
title = "Number of Movies in Each Genre for xxxx Language") +
theme_minimal()
movies %>%
arrange(desc(Popularity)) %>%
select(Title, Popularity) %>%
top_n(20) %>%
ggplot(aes(x = Popularity, y = fct_reorder(Title,Popularity))) +
geom_col()  +
ggtitle("Top 20 Movies by Popularity") +
ylab("") +
theme_minimal()
#this graph is kinda useless
movies %>%
mutate(year = lubridate::year(Release_Date)) %>%
group_by(year) %>%
mutate(count = n()) %>%
ungroup() %>%
ggplot(aes(y = Release_Date)) +
geom_density() +
coord_flip() +
theme_minimal()
movies %>%
filter(Original_Language == "en") %>%
filter(Release_Date %in% c(2020-10-4, 2021-10-4))
shiny::runApp()
movies %>%
filter(Original_Language == "en") %>%
filter(between(Release_Date,
as.Date(2020-10-4),
as.date(2021-10-4))) %>%
filter("Action" %in% Genre) %>%
arrange(desc(Vote_Average)) %>%
select(Title, Vote_Average) %>%
top_n(20) %>%
ggplot(aes(x = Vote_Average, y = fct_reorder(Title,Vote_Average))) +
geom_col()  +
labs(x = "Average Rating", y = "",
title = "Top 20 Average Movie Ratings",
caption = "Ratings on a scale of 0-10, with higher values indicating better scores.\nData based on consumer ratings from TMDB.") +
theme_minimal()
movies %>%
filter(Original_Language == "en") %>%
filter(between(Release_Date,
as.Date("2020-10-4"),
as.date("2021-10-4"))) %>%
filter("Action" %in% Genre) %>%
arrange(desc(Vote_Average)) %>%
select(Title, Vote_Average) %>%
top_n(20) %>%
ggplot(aes(x = Vote_Average, y = fct_reorder(Title,Vote_Average))) +
geom_col()  +
labs(x = "Average Rating", y = "",
title = "Top 20 Average Movie Ratings",
caption = "Ratings on a scale of 0-10, with higher values indicating better scores.\nData based on consumer ratings from TMDB.") +
theme_minimal()
movies %>%
filter(Original_Language == "en") %>%
filter(between(Release_Date,
as.Date("2020-10-4"),
as.Date("2021-10-4"))) %>%
filter("Action" %in% Genre) %>%
arrange(desc(Vote_Average)) %>%
select(Title, Vote_Average) %>%
top_n(20) %>%
ggplot(aes(x = Vote_Average, y = fct_reorder(Title,Vote_Average))) +
geom_col()  +
labs(x = "Average Rating", y = "",
title = "Top 20 Average Movie Ratings",
caption = "Ratings on a scale of 0-10, with higher values indicating better scores.\nData based on consumer ratings from TMDB.") +
theme_minimal()
movies %>%
filter(Original_Language == "en") %>%
filter(between(Release_Date,
as.Date("2020-10-4"),
as.Date("2021-10-4"))) %>%
filter("Action" %in% Genre) %>%
arrange(desc(Popularity)) %>%
select(Title, Popularity) %>%
top_n(20) %>%
ggplot(aes(x = Popularity, y = fct_reorder(Title,Popularity))) +
geom_col()  +
ggtitle("Top 20 Movies by Popularity") +
ylab("") +
theme_minimal()
movies %>%
filter(Original_Language == "en") %>%
filter(between(Release_Date,
as.Date("2020-10-4"),
as.Date("2021-10-4"))) %>%
filter("Action" %in% Genre) %>%
arrange(desc(Vote_Average)) %>%
select(Title, Vote_Average) %>%
top_n(20) %>%
ggplot(aes(x = Vote_Average, y = fct_reorder(Title,Vote_Average))) +
geom_col() +
labs(x = "Average Rating", y = "",
title = "Top 20 Average Movie Ratings",
caption = "Ratings on a scale of 0-10, with higher values indicating better scores.\nData based on consumer ratings from TMDB.") +
scale_y_discrete(labels = function(x) str_wrap(x, width = 15)) +
theme_minimal()
movies %>%
filter(Original_Language == "en") %>%
filter(between(Release_Date,
as.Date("2020-10-4"),
as.Date("2021-10-4"))) %>%
filter("Action" %in% Genre) %>%
arrange(desc(Vote_Average)) %>%
select(Title, Vote_Average) %>%
top_n(20) %>%
ggplot(aes(x = Vote_Average, y = fct_reorder(Title,Vote_Average))) +
geom_col() +
labs(x = "Average Rating", y = "",
title = "Top 20 Average Movie Ratings",
caption = "Ratings on a scale of 0-10, with higher values indicating better scores.\nData based on consumer ratings from TMDB.") +
opts(title="width = .5") +
scale_y_discrete(labels = function(x) str_wrap(x, width = 15)) +
theme_minimal()
movies %>%
filter(Original_Language == "en") %>%
filter(between(Release_Date,
as.Date("2020-10-4"),
as.Date("2021-10-4"))) %>%
filter("Action" %in% Genre) %>%
arrange(desc(Vote_Average)) %>%
select(Title, Vote_Average) %>%
top_n(20) %>%
ggplot(aes(x = Vote_Average, y = fct_reorder(Title,Vote_Average),
width = 0.5)) +
geom_col() +
labs(x = "Average Rating", y = "",
title = "Top 20 Average Movie Ratings",
caption = "Ratings on a scale of 0-10, with higher values indicating better scores.\nData based on consumer ratings from TMDB.") +
scale_y_discrete(labels = function(x) str_wrap(x, width = 15)) +
theme_minimal()
movies %>%
filter(Original_Language == "en") %>%
filter(between(Release_Date,
as.Date("2020-10-4"),
as.Date("2021-10-4"))) %>%
filter("Action" %in% Genre) %>%
arrange(desc(Vote_Average)) %>%
select(Title, Vote_Average) %>%
top_n(20) %>%
ggplot(aes(x = Vote_Average, y = fct_reorder(Title,Vote_Average),
width = 0.5)) +
geom_col() +
labs(x = "Average Rating", y = "",
title = "Top 20 Average Movie Ratings",
caption = "Ratings on a scale of 0-10, with higher values indicating better scores.\nData based on consumer ratings from TMDB.") +
scale_y_discrete(labels = function(x) str_wrap(x, width = 25)) +
theme_minimal()
movies %>%
filter(Original_Language == "en") %>%
filter(between(Release_Date,
as.Date("2020-10-4"),
as.Date("2021-10-4"))) %>%
filter("Action" %in% Genre) %>%
arrange(desc(Vote_Average)) %>%
select(Title, Vote_Average) %>%
top_n(20) %>%
ggplot(aes(x = Vote_Average, y = fct_reorder(Title,Vote_Average),
width = 1)) +
geom_col() +
labs(x = "Average Rating", y = "",
title = "Top 20 Average Movie Ratings",
caption = "Ratings on a scale of 0-10, with higher values indicating better scores.\nData based on consumer ratings from TMDB.") +
scale_y_discrete(labels = function(x) str_wrap(x, width = 25)) +
theme_minimal()
movies %>%
filter(Original_Language == "en") %>%
filter(between(Release_Date,
as.Date("2020-10-4"),
as.Date("2021-10-4"))) %>%
filter("Action" %in% Genre) %>%
arrange(desc(Vote_Average)) %>%
select(Title, Vote_Average) %>%
top_n(20) %>%
ggplot(aes(x = Vote_Average, y = fct_reorder(Title,Vote_Average),
width = 0.75)) +
geom_col() +
labs(x = "Average Rating", y = "",
title = "Top 20 Average Movie Ratings",
caption = "Ratings on a scale of 0-10, with higher values indicating better scores.\nData based on consumer ratings from TMDB.") +
scale_y_discrete(labels = function(x) str_wrap(x, width = 25)) +
theme_minimal()
movies %>%
filter(Original_Language == "en") %>%
filter(between(Release_Date,
as.Date("2020-10-4"),
as.Date("2021-10-4"))) %>%
filter("Action" %in% Genre) %>%
arrange(desc(Vote_Average)) %>%
select(Title, Vote_Average) %>%
top_n(20) %>%
ggplot(aes(x = Vote_Average, y = fct_reorder(Title,Vote_Average),
width = 0.75)) +
geom_col() +
labs(x = "Average Rating", y = "",
title = "Top 20 Average Movie Ratings",
caption = "Ratings on a scale of 0-10, with higher values indicating better scores.\nData based on consumer ratings from TMDB.") +
scale_y_discrete(labels = function(x) str_wrap(x, width = 25)) +
theme_minimal()
movies %>%
filter(Original_Language == "en") %>%
filter(between(Release_Date,
as.Date("2020-10-4"),
as.Date("2021-10-4"))) %>%
filter("Action" %in% Genre) %>%
arrange(desc(Vote_Average)) %>%
select(Title, Vote_Average) %>%
top_n(20) %>%
ggplot(aes(x = Vote_Average, y = fct_reorder(Title,Vote_Average),
width = 0.75)) +
geom_col() +
labs(x = "Average Rating", y = "",
title = "Top 20 Average Movie Ratings",
caption = "Ratings on a scale of 0-10, with higher values indicating better scores.\nData based on consumer ratings from TMDB.") +
scale_y_discrete(labels = function(x) str_wrap(x, width = 25)) +
theme_minimal()
movies %>%
filter(Original_Language == "en") %>%
filter(between(Release_Date,
as.Date("2020-10-4"),
as.Date("2021-10-4"))) %>%
filter("Action" %in% Genre) %>%
arrange(desc(Vote_Average)) %>%
select(Title, Vote_Average) %>%
top_n(20) %>%
ggplot(aes(x = Vote_Average, y = fct_reorder(Title,Vote_Average),
width = 0.75)) +
geom_col(width = 0.5, position = position_dodge(0.7)) +
labs(x = "Average Rating", y = "",
title = "Top 20 Average Movie Ratings",
caption = "Ratings on a scale of 0-10, with higher values indicating better scores.\nData based on consumer ratings from TMDB.") +
scale_y_discrete(labels = function(x) str_wrap(x, width = 25)) +
theme_minimal()
movies %>%
filter(Original_Language == "en") %>%
filter(between(Release_Date,
as.Date("2020-10-4"),
as.Date("2021-10-4"))) %>%
filter("Action" %in% Genre) %>%
arrange(desc(Vote_Average)) %>%
select(Title, Vote_Average) %>%
top_n(20) %>%
ggplot(aes(x = Vote_Average, y = fct_reorder(Title,Vote_Average),
width = 0.75)) +
geom_col(width = 0.75, position = position_dodge(0.7)) +
labs(x = "Average Rating", y = "",
title = "Top 20 Average Movie Ratings",
caption = "Ratings on a scale of 0-10, with higher values indicating better scores.\nData based on consumer ratings from TMDB.") +
scale_y_discrete(labels = function(x) str_wrap(x, width = 25)) +
theme_minimal()
movies %>%
filter(Original_Language == "en") %>%
filter(between(Release_Date,
as.Date("2020-10-4"),
as.Date("2021-10-4"))) %>%
filter("Action" %in% Genre) %>%
arrange(desc(Vote_Average)) %>%
select(Title, Vote_Average) %>%
top_n(20) %>%
ggplot(aes(x = Vote_Average, y = fct_reorder(Title,Vote_Average))) +
geom_col() +
labs(x = "Average Rating", y = "",
title = "Top 20 Average Movie Ratings",
caption = "Ratings on a scale of 0-10, with higher values indicating better scores.\nData based on consumer ratings from TMDB.") +
theme_minimal()
movies %>%
filter(Original_Language == "en") %>%
filter(between(Release_Date,
as.Date("2020-10-4"),
as.Date("2021-10-4"))) %>%
filter("Action" %in% Genre) %>%
arrange(desc(Vote_Average)) %>%
select(Title, Vote_Average) %>%
top_n(20) %>%
ggplot(aes(x = Vote_Average, y = fct_reorder(Title,Vote_Average))) +
geom_col() +
labs(x = "Average Rating", y = "",
title = "Top 20 Average Movie Ratings",
caption = "Ratings on a scale of 0-10, with higher values indicating better scores.\nData based on consumer ratings from TMDB.") +
theme_minimal()
>>>>>>> c7ac0338618e33a9bcda8446aa8e2581172d41e6
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
install.packages("shinyBS")
runApp()
shiny::runApp()
